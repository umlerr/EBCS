// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/14/2024 18:15:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_1_vlg_sample_tst(
	x,
	sampler_tx
);
input [4:1] x;
output sampler_tx;

reg sample;
time current_time;
always @(x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab2_1_vlg_check_tst (
	dec_out,
	lab1_out,
	mux_out,
	sampler_rx
);
input  dec_out;
input  lab1_out;
input  mux_out;
input sampler_rx;

reg  dec_out_expected;
reg  lab1_out_expected;
reg  mux_out_expected;

reg  dec_out_prev;
reg  lab1_out_prev;
reg  mux_out_prev;

reg  dec_out_expected_prev;
reg  lab1_out_expected_prev;
reg  mux_out_expected_prev;

reg  last_dec_out_exp;
reg  last_lab1_out_exp;
reg  last_mux_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	dec_out_prev = dec_out;
	lab1_out_prev = lab1_out;
	mux_out_prev = mux_out;
end

// update expected /o prevs

always @(trigger)
begin
	dec_out_expected_prev = dec_out_expected;
	lab1_out_expected_prev = lab1_out_expected;
	mux_out_expected_prev = mux_out_expected;
end



// expected lab1_out
initial
begin
	lab1_out_expected = 1'bX;
end 

// expected dec_out
initial
begin
	dec_out_expected = 1'bX;
end 

// expected mux_out
initial
begin
	mux_out_expected = 1'bX;
end 
// generate trigger
always @(dec_out_expected or dec_out or lab1_out_expected or lab1_out or mux_out_expected or mux_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dec_out = %b | expected lab1_out = %b | expected mux_out = %b | ",dec_out_expected_prev,lab1_out_expected_prev,mux_out_expected_prev);
	$display("| real dec_out = %b | real lab1_out = %b | real mux_out = %b | ",dec_out_prev,lab1_out_prev,mux_out_prev);
`endif
	if (
		( dec_out_expected_prev !== 1'bx ) && ( dec_out_prev !== dec_out_expected_prev )
		&& ((dec_out_expected_prev !== last_dec_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_out_expected_prev);
		$display ("     Real value = %b", dec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_out_exp = dec_out_expected_prev;
	end
	if (
		( lab1_out_expected_prev !== 1'bx ) && ( lab1_out_prev !== lab1_out_expected_prev )
		&& ((lab1_out_expected_prev !== last_lab1_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lab1_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lab1_out_expected_prev);
		$display ("     Real value = %b", lab1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lab1_out_exp = lab1_out_expected_prev;
	end
	if (
		( mux_out_expected_prev !== 1'bx ) && ( mux_out_prev !== mux_out_expected_prev )
		&& ((mux_out_expected_prev !== last_mux_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_out_expected_prev);
		$display ("     Real value = %b", mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mux_out_exp = mux_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:1] x;
// wires                                               
wire dec_out;
wire lab1_out;
wire mux_out;

wire sampler;                             

// assign statements (if any)                          
lab2_1 i1 (
// port map - connection between master ports and signals/registers   
	.dec_out(dec_out),
	.lab1_out(lab1_out),
	.mux_out(mux_out),
	.x(x)
);

// x[1]
initial
begin
	x[1] = 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
end 

// x[2]
initial
begin
	x[2] = 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #70000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #70000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #70000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #20000 1'b0;
end 

// x[3]
initial
begin
	x[3] = 1'b0;
	x[3] = #100000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #130000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
end 

// x[4]
initial
begin
	x[4] = 1'b0;
	x[4] = #220000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #20000 1'b0;
end 

lab2_1_vlg_sample_tst tb_sample (
	.x(x),
	.sampler_tx(sampler)
);

lab2_1_vlg_check_tst tb_out(
	.dec_out(dec_out),
	.lab1_out(lab1_out),
	.mux_out(mux_out),
	.sampler_rx(sampler)
);
endmodule

