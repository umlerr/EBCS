// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2024 18:48:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    JK_trigger
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module JK_trigger_vlg_sample_tst(
	Clk,
	PRM,
	sampler_tx
);
input  Clk;
input  PRM;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or PRM)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module JK_trigger_vlg_check_tst (
	C,
	J,
	JK,
	K,
	x,
	sampler_rx
);
input  C;
input  J;
input  JK;
input  K;
input [3:0] x;
input sampler_rx;

reg  C_expected;
reg  J_expected;
reg  JK_expected;
reg  K_expected;
reg [3:0] x_expected;

reg  C_prev;
reg  J_prev;
reg  JK_prev;
reg  K_prev;
reg [3:0] x_prev;

reg  C_expected_prev;
reg  J_expected_prev;
reg  JK_expected_prev;
reg  K_expected_prev;
reg [3:0] x_expected_prev;

reg  last_C_exp;
reg  last_J_exp;
reg  last_JK_exp;
reg  last_K_exp;
reg [3:0] last_x_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	J_prev = J;
	JK_prev = JK;
	K_prev = K;
	x_prev = x;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	J_expected_prev = J_expected;
	JK_expected_prev = JK_expected;
	K_expected_prev = K_expected;
	x_expected_prev = x_expected;
end



// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected J
initial
begin
	J_expected = 1'bX;
end 

// expected K
initial
begin
	K_expected = 1'bX;
end 

// expected JK
initial
begin
	JK_expected = 1'bX;
end 
// expected x[ 3 ]
initial
begin
	x_expected[3] = 1'bX;
end 
// expected x[ 2 ]
initial
begin
	x_expected[2] = 1'bX;
end 
// expected x[ 1 ]
initial
begin
	x_expected[1] = 1'bX;
end 
// expected x[ 0 ]
initial
begin
	x_expected[0] = 1'bX;
end 
// generate trigger
always @(C_expected or C or J_expected or J or JK_expected or JK or K_expected or K or x_expected or x)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected J = %b | expected JK = %b | expected K = %b | expected x = %b | ",C_expected_prev,J_expected_prev,JK_expected_prev,K_expected_prev,x_expected_prev);
	$display("| real C = %b | real J = %b | real JK = %b | real K = %b | real x = %b | ",C_prev,J_prev,JK_prev,K_prev,x_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( J_expected_prev !== 1'bx ) && ( J_prev !== J_expected_prev )
		&& ((J_expected_prev !== last_J_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J_expected_prev);
		$display ("     Real value = %b", J_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_J_exp = J_expected_prev;
	end
	if (
		( JK_expected_prev !== 1'bx ) && ( JK_prev !== JK_expected_prev )
		&& ((JK_expected_prev !== last_JK_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JK_expected_prev);
		$display ("     Real value = %b", JK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_JK_exp = JK_expected_prev;
	end
	if (
		( K_expected_prev !== 1'bx ) && ( K_prev !== K_expected_prev )
		&& ((K_expected_prev !== last_K_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K_expected_prev);
		$display ("     Real value = %b", K_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_K_exp = K_expected_prev;
	end
	if (
		( x_expected_prev[0] !== 1'bx ) && ( x_prev[0] !== x_expected_prev[0] )
		&& ((x_expected_prev[0] !== last_x_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[0] = x_expected_prev[0];
	end
	if (
		( x_expected_prev[1] !== 1'bx ) && ( x_prev[1] !== x_expected_prev[1] )
		&& ((x_expected_prev[1] !== last_x_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[1] = x_expected_prev[1];
	end
	if (
		( x_expected_prev[2] !== 1'bx ) && ( x_prev[2] !== x_expected_prev[2] )
		&& ((x_expected_prev[2] !== last_x_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[2] = x_expected_prev[2];
	end
	if (
		( x_expected_prev[3] !== 1'bx ) && ( x_prev[3] !== x_expected_prev[3] )
		&& ((x_expected_prev[3] !== last_x_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[3] = x_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#640000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module JK_trigger_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg PRM;
// wires                                               
wire C;
wire J;
wire JK;
wire K;
wire [3:0] x;

wire sampler;                             

// assign statements (if any)                          
JK_trigger i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.Clk(Clk),
	.J(J),
	.JK(JK),
	.K(K),
	.PRM(PRM),
	.x(x)
);

// PRM
initial
begin
	PRM = 1'b1;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #10000 1'b1;
	#10000;
end 

JK_trigger_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.PRM(PRM),
	.sampler_tx(sampler)
);

JK_trigger_vlg_check_tst tb_out(
	.C(C),
	.J(J),
	.JK(JK),
	.K(K),
	.x(x),
	.sampler_rx(sampler)
);
endmodule

