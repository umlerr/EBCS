// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2024 16:30:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Coursework_mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Coursework_mux_vlg_sample_tst(
	c,
	load,
	reset,
	speed,
	start,
	stop,
	x,
	sampler_tx
);
input  c;
input  load;
input  reset;
input  speed;
input  start;
input  stop;
input [11:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(c or load or reset or speed or start or stop or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Coursework_mux_vlg_check_tst (
	c_M,
	data,
	ready,
	serial_code,
	sampler_rx
);
input  c_M;
input [14:0] data;
input  ready;
input  serial_code;
input sampler_rx;

reg  c_M_expected;
reg [14:0] data_expected;
reg  ready_expected;
reg  serial_code_expected;

reg  c_M_prev;
reg [14:0] data_prev;
reg  ready_prev;
reg  serial_code_prev;

reg  c_M_expected_prev;
reg [14:0] data_expected_prev;
reg  ready_expected_prev;
reg  serial_code_expected_prev;

reg  last_c_M_exp;
reg [14:0] last_data_exp;
reg  last_ready_exp;
reg  last_serial_code_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_M_prev = c_M;
	data_prev = data;
	ready_prev = ready;
	serial_code_prev = serial_code;
end

// update expected /o prevs

always @(trigger)
begin
	c_M_expected_prev = c_M_expected;
	data_expected_prev = data_expected;
	ready_expected_prev = ready_expected;
	serial_code_expected_prev = serial_code_expected;
end



// expected ready
initial
begin
	ready_expected = 1'bX;
end 

// expected c_M
initial
begin
	c_M_expected = 1'bX;
end 

// expected serial_code
initial
begin
	serial_code_expected = 1'bX;
end 
// expected data[ 14 ]
initial
begin
	data_expected[14] = 1'bX;
end 
// expected data[ 13 ]
initial
begin
	data_expected[13] = 1'bX;
end 
// expected data[ 12 ]
initial
begin
	data_expected[12] = 1'bX;
end 
// expected data[ 11 ]
initial
begin
	data_expected[11] = 1'bX;
end 
// expected data[ 10 ]
initial
begin
	data_expected[10] = 1'bX;
end 
// expected data[ 9 ]
initial
begin
	data_expected[9] = 1'bX;
end 
// expected data[ 8 ]
initial
begin
	data_expected[8] = 1'bX;
end 
// expected data[ 7 ]
initial
begin
	data_expected[7] = 1'bX;
end 
// expected data[ 6 ]
initial
begin
	data_expected[6] = 1'bX;
end 
// expected data[ 5 ]
initial
begin
	data_expected[5] = 1'bX;
end 
// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 
// generate trigger
always @(c_M_expected or c_M or data_expected or data or ready_expected or ready or serial_code_expected or serial_code)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c_M = %b | expected data = %b | expected ready = %b | expected serial_code = %b | ",c_M_expected_prev,data_expected_prev,ready_expected_prev,serial_code_expected_prev);
	$display("| real c_M = %b | real data = %b | real ready = %b | real serial_code = %b | ",c_M_prev,data_prev,ready_prev,serial_code_prev);
`endif
	if (
		( c_M_expected_prev !== 1'bx ) && ( c_M_prev !== c_M_expected_prev )
		&& ((c_M_expected_prev !== last_c_M_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_M_expected_prev);
		$display ("     Real value = %b", c_M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_M_exp = c_M_expected_prev;
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( data_expected_prev[8] !== 1'bx ) && ( data_prev[8] !== data_expected_prev[8] )
		&& ((data_expected_prev[8] !== last_data_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[8] = data_expected_prev[8];
	end
	if (
		( data_expected_prev[9] !== 1'bx ) && ( data_prev[9] !== data_expected_prev[9] )
		&& ((data_expected_prev[9] !== last_data_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[9] = data_expected_prev[9];
	end
	if (
		( data_expected_prev[10] !== 1'bx ) && ( data_prev[10] !== data_expected_prev[10] )
		&& ((data_expected_prev[10] !== last_data_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[10] = data_expected_prev[10];
	end
	if (
		( data_expected_prev[11] !== 1'bx ) && ( data_prev[11] !== data_expected_prev[11] )
		&& ((data_expected_prev[11] !== last_data_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[11] = data_expected_prev[11];
	end
	if (
		( data_expected_prev[12] !== 1'bx ) && ( data_prev[12] !== data_expected_prev[12] )
		&& ((data_expected_prev[12] !== last_data_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[12] = data_expected_prev[12];
	end
	if (
		( data_expected_prev[13] !== 1'bx ) && ( data_prev[13] !== data_expected_prev[13] )
		&& ((data_expected_prev[13] !== last_data_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[13] = data_expected_prev[13];
	end
	if (
		( data_expected_prev[14] !== 1'bx ) && ( data_prev[14] !== data_expected_prev[14] )
		&& ((data_expected_prev[14] !== last_data_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[14] = data_expected_prev[14];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end
	if (
		( serial_code_expected_prev !== 1'bx ) && ( serial_code_prev !== serial_code_expected_prev )
		&& ((serial_code_expected_prev !== last_serial_code_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port serial_code :: @time = %t",  $realtime);
		$display ("     Expected value = %b", serial_code_expected_prev);
		$display ("     Real value = %b", serial_code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_serial_code_exp = serial_code_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Coursework_mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c;
reg load;
reg reset;
reg speed;
reg start;
reg stop;
reg [11:0] x;
// wires                                               
wire c_M;
wire [14:0] data;
wire ready;
wire serial_code;

wire sampler;                             

// assign statements (if any)                          
Coursework_mux i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.c_M(c_M),
	.data(data),
	.load(load),
	.ready(ready),
	.reset(reset),
	.serial_code(serial_code),
	.speed(speed),
	.start(start),
	.stop(stop),
	.x(x)
);

// c
initial
begin
	repeat(52)
	begin
		c = 1'b0;
		c = #40000 1'b1;
		# 40000;
	end
	c = 1'b0;
end 

// load
initial
begin
	load = 1'b0;
	load = #40000 1'b1;
	load = #80000 1'b0;
	load = #3640000 1'b1;
	load = #80000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #120000 1'b1;
	start = #80000 1'b0;
	start = #3640000 1'b1;
	start = #80000 1'b0;
end 

// speed
initial
begin
	speed = 1'b0;
	speed = #120000 1'b1;
	speed = #80000 1'b0;
	speed = #3640000 1'b1;
	speed = #80000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// stop
initial
begin
	stop = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
	x[10] = #40000 1'b1;
	x[10] = #80000 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #160000 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #160000 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
	x[5] = #40000 1'b1;
	x[5] = #80000 1'b0;
	x[5] = #80000 1'b1;
	x[5] = #80000 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #80000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #3760000 1'b1;
	x[2] = #80000 1'b0;
	x[2] = #80000 1'b1;
	x[2] = #160000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #120000 1'b1;
	x[1] = #80000 1'b0;
	x[1] = #3720000 1'b1;
	x[1] = #160000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #80000 1'b0;
	x[0] = #3800000 1'b1;
	x[0] = #160000 1'b0;
end 

Coursework_mux_vlg_sample_tst tb_sample (
	.c(c),
	.load(load),
	.reset(reset),
	.speed(speed),
	.start(start),
	.stop(stop),
	.x(x),
	.sampler_tx(sampler)
);

Coursework_mux_vlg_check_tst tb_out(
	.c_M(c_M),
	.data(data),
	.ready(ready),
	.serial_code(serial_code),
	.sampler_rx(sampler)
);
endmodule

